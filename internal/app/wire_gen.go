// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"crypto/rsa"
	"github.com/go-pg/pg/v10"
	"github.com/google/wire"
	"github.com/marvinmarpol/golang-boilerplate/internal/protection/command"
	"github.com/marvinmarpol/golang-boilerplate/internal/protection/domain/mask"
	"github.com/marvinmarpol/golang-boilerplate/internal/protection/query"
	"github.com/marvinmarpol/golang-boilerplate/internal/protection/service"
	"github.com/marvinmarpol/golang-boilerplate/internal/protection/transport/pubsub"
	"github.com/marvinmarpol/golang-boilerplate/internal/protection/transport/web"
)

// Injectors from wire.go:

func InitializeWebServer(db2 *pg.DB, pubKey *rsa.PublicKey, priKey *rsa.PrivateKey) (web.Route, error) {
	postgresRepository := mask.NewPostgresRepository(db2)
	createMaskHandler := command.NewCreateMaskHandler(postgresRepository)
	updateTokenHandler := command.NewUpdateTokenHandler(postgresRepository)
	updateMaskHandler := command.NewUpdateMaskHandler(postgresRepository)
	commands := command.Commands{
		CreateMaskCommand:  createMaskHandler,
		UpdateTokenCommand: updateTokenHandler,
		UpdateMaskCommand:  updateMaskHandler,
	}
	getCypherHandler := query.NewGetCypherHandler(postgresRepository)
	getMaskHandler := query.NewGetMaskHandler(postgresRepository)
	getTokenHandler := query.NewGetTokenHandler(postgresRepository)
	getRotateCandidateHandler := query.NewGetRotateCandidateHandler(postgresRepository)
	queries := query.Queries{
		GetCypherQuery:          getCypherHandler,
		GetMaskQuery:            getMaskHandler,
		GetTokenQuery:           getTokenHandler,
		GetRotateCandidateQuery: getRotateCandidateHandler,
	}
	serviceImpl := service.NewServiceImpl(commands, queries, pubKey, priKey)
	server := web.NewServer(serviceImpl)
	return server, nil
}

func InitializePubsubServer(db2 *pg.DB, pubKey *rsa.PublicKey, priKey *rsa.PrivateKey) (pubsub.Route, error) {
	postgresRepository := mask.NewPostgresRepository(db2)
	createMaskHandler := command.NewCreateMaskHandler(postgresRepository)
	updateTokenHandler := command.NewUpdateTokenHandler(postgresRepository)
	updateMaskHandler := command.NewUpdateMaskHandler(postgresRepository)
	commands := command.Commands{
		CreateMaskCommand:  createMaskHandler,
		UpdateTokenCommand: updateTokenHandler,
		UpdateMaskCommand:  updateMaskHandler,
	}
	getCypherHandler := query.NewGetCypherHandler(postgresRepository)
	getMaskHandler := query.NewGetMaskHandler(postgresRepository)
	getTokenHandler := query.NewGetTokenHandler(postgresRepository)
	getRotateCandidateHandler := query.NewGetRotateCandidateHandler(postgresRepository)
	queries := query.Queries{
		GetCypherQuery:          getCypherHandler,
		GetMaskQuery:            getMaskHandler,
		GetTokenQuery:           getTokenHandler,
		GetRotateCandidateQuery: getRotateCandidateHandler,
	}
	serviceImpl := service.NewServiceImpl(commands, queries, pubKey, priKey)
	server := pubsub.NewServer(serviceImpl)
	return server, nil
}

// wire.go:

var moduleSet = wire.NewSet(command.NewCreateMaskHandler, wire.Bind(new(command.CommandHandler[command.CreateMaskCommand]), new(*command.CreateMaskHandler)), command.NewUpdateTokenHandler, wire.Bind(new(command.CommandHandler[command.UpdateTokenCommand]), new(*command.UpdateTokenHandler)), command.NewUpdateMaskHandler, wire.Bind(new(command.CommandHandler[command.UpdateMaskCommand]), new(*command.UpdateMaskHandler)), query.NewGetCypherHandler, wire.Bind(new(query.QueryHandler[query.GetCypherQuery]), new(*query.GetCypherHandler)), query.NewGetMaskHandler, wire.Bind(new(query.QueryHandler[query.GetMaskQuery]), new(*query.GetMaskHandler)), query.NewGetTokenHandler, wire.Bind(new(query.QueryHandler[query.GetTokenQuery]), new(*query.GetTokenHandler)), query.NewGetRotateCandidateHandler, wire.Bind(new(query.QueryHandler[query.GetRotateCandidateQuery]), new(*query.GetRotateCandidateHandler)), mask.NewPostgresRepository, wire.Bind(new(mask.Repository), new(*mask.PostgresRepository)), service.NewServiceImpl, wire.Bind(new(service.Services), new(*service.ServiceImpl)), wire.Struct(new(command.Commands), "*"), wire.Struct(new(query.Queries), "*"))
