// Code generated by MockGen. DO NOT EDIT.
// Source: internal/protection/domain/mask/repository.go

// Package mock_mask is a generated GoMock package.
package mock_mask

import (
	context "context"
	reflect "reflect"

	mask "github.com/marvinmarpol/golang-boilerplate/internal/protection/domain/mask"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, entity mask.Mask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, entity)
}

// FindByToken mocks base method.
func (m *MockRepository) FindByToken(ctx context.Context, token string) (mask.Mask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", ctx, token)
	ret0, _ := ret[0].(mask.Mask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRepositoryMockRecorder) FindByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRepository)(nil).FindByToken), ctx, token)
}

// GetRotateCandidate mocks base method.
func (m *MockRepository) GetRotateCandidate(ctx context.Context, dayDifference, limit, offset int) ([]mask.Mask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRotateCandidate", ctx, dayDifference, limit, offset)
	ret0, _ := ret[0].([]mask.Mask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRotateCandidate indicates an expected call of GetRotateCandidate.
func (mr *MockRepositoryMockRecorder) GetRotateCandidate(ctx, dayDifference, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRotateCandidate", reflect.TypeOf((*MockRepository)(nil).GetRotateCandidate), ctx, dayDifference, limit, offset)
}

// GetTokenByHash mocks base method.
func (m *MockRepository) GetTokenByHash(ctx context.Context, hash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByHash", ctx, hash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByHash indicates an expected call of GetTokenByHash.
func (mr *MockRepositoryMockRecorder) GetTokenByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByHash", reflect.TypeOf((*MockRepository)(nil).GetTokenByHash), ctx, hash)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, entity mask.Mask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, entity)
}

// UpdateToken mocks base method.
func (m *MockRepository) UpdateToken(ctx context.Context, entity mask.Mask, oldToken, newToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, entity, oldToken, newToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockRepositoryMockRecorder) UpdateToken(ctx, entity, oldToken, newToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockRepository)(nil).UpdateToken), ctx, entity, oldToken, newToken)
}

// UpdateTokenByHash mocks base method.
func (m *MockRepository) UpdateTokenByHash(ctx context.Context, entity mask.Mask, hash, newToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenByHash", ctx, entity, hash, newToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenByHash indicates an expected call of UpdateTokenByHash.
func (mr *MockRepositoryMockRecorder) UpdateTokenByHash(ctx, entity, hash, newToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenByHash", reflect.TypeOf((*MockRepository)(nil).UpdateTokenByHash), ctx, entity, hash, newToken)
}
